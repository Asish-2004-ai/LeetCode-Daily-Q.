class Solution {
public:
    vector<bool> isArraySpecial(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        vector<int> parityDiff(n - 1, 0);

        // Compute parity differences
        for (int i = 0; i < n - 1; ++i) {
            parityDiff[i] = (nums[i] % 2) != (nums[i + 1] % 2);
        }

        vector<int> prefixParity(n, 0);
        for (int i = 0; i < n - 1; ++i) {
            prefixParity[i + 1] = prefixParity[i] + parityDiff[i];
        }

        vector<bool> result;
        for (const auto& query : queries) {
            int from = query[0], to = query[1];

            if (to - from == 0) {
                result.push_back(true);
                continue;
            }

            int diffSum = prefixParity[to] - prefixParity[from];
            result.push_back(diffSum == (to - from));
        }

        return result;
    }
};
